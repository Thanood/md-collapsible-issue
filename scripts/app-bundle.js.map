{"version":3,"sources":["app.ts","environment.ts","main.ts","resources/index.ts"],"names":[],"mappings":";;;;;;;;;;;IAIA,IAAa,GAAG;QAKd,aAAY,EAAE;YAHd,YAAO,GAAG,cAAc,CAAC;YAIvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACtB,CAAC;QAED,sBAAQ,GAAR;YAAA,iBAIC;YAHC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;gBAC5B,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC;QACH,UAAC;IAAD,CAdA,AAcC,IAAA;IAdY,GAAG;QADf,0BAAM,CAAC,6BAAS,CAAC;;OACL,GAAG,CAcf;IAdY,kBAAG;;;;;;ICJhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;ICCI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC;aACpB,MAAM,CAAC,4BAA4B,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAE,EAAV,CAAU,CAAC,CAAC;QAEzD,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAfD,8BAeC;;;;;ICvBD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC","file":"app-bundle.js","sourcesContent":["import {inject, TaskQueue} from 'aurelia-framework';\ndeclare var $;\n\n@inject(TaskQueue)\nexport class App {\n  activeHeader: HTMLDivElement;\n  message = 'Hello World!';\n  taskQueue: TaskQueue;\n\n  constructor(tq) {\n    this.taskQueue = tq;\n  }\n\n  attached() {\n    this.taskQueue.queueMicroTask(() => {\n      $(this.activeHeader).trigger('click');\n    });\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n    .plugin('aurelia-materialize-bridge', b => b.useAll());\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}